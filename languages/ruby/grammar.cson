comments:
  start: '# '

folds:
  delimiters: [
    ['{', '}', {afterType: 'block_parameters'}],
    ['(', ')'],
    ['[', ']'],
    ['begin', 'end'],
    ['do', 'end', {afterType: 'block_parameters'}],
    ['def', 'end', {afterChildCount: 1, afterType: 'method_parameters'}],
    ['unless', 'end', {afterChildCount: 1}],
    ['if', 'end', {afterChildCount: 1}],
    ['case', 'end', {afterChildCount: 1}],
    ['class', 'end', {afterChildCount: 1, afterType: 'superclass'}]
  ]

scopes:
  '"if"': 'keyword.control'
  '"unless"': 'keyword.control'
  '"def"': 'keyword.control'
  '"do"': 'keyword.control'
  '"end"': 'keyword.control'
  '"else"': 'keyword.control'
  '"elsif"': 'keyword.control'
  '"class"': 'keyword.control'
  '"module"': 'keyword.control'
  '"begin"': 'keyword.control'
  '"rescue"': 'keyword.control'
  '"ensure"': 'keyword.control'
  '"return"': 'keyword.control'
  '"yield"': 'keyword.control'
  '"case"': 'keyword.control'
  '"when"': 'keyword.control'

  'constant': 'entity.name.type.class'

  'self': 'variable.other'

  'method > identifier': 'entity.name.function'
  'call > identifier:nth-child(2)': 'entity.name.function'
  'method_call > identifier:nth-child(0)': 'entity.name.function'

  'class_variable': 'variable.other.object.property'
  'instance_variable': 'variable.other.object.property'
  'symbol': 'constant.other'

  'comment': 'comment'
  'string': 'string'
  'regex': 'string.regex'
  'heredoc_beginning': 'string'
  'heredoc_end': 'string'
  'integer': 'constant.numeric'

  'nil': 'constant.language.nil'
  'true': 'constant.language.true'
  'false': 'constant.language.false'
